package mm223kk_assignment_2;

//Needed libraries, only built in.
import java.io.*;
import java.net.*;
import java.util.StringTokenizer;

/**
 * This class handles all the requests to the server.
 * @author Sami Mwanje, mm223kk@student.lnu.se
 */
public class Request implements Runnable{
	
	private Socket socket;	// Current socket
	private Errors Errors;	// Error handling class.
	private Response Response;	// The response class.
	private Post Post;	// The class handling post of a file.

	Request(Socket socket, File root){
		this.socket = socket;
		this.Errors = new Errors(socket, root);
		this.Response = new Response(socket, root);
		this.Post = new Post(socket, root);
	}

	public void handleHeader() {
	 	try {	
	 		BufferedReader request = new BufferedReader(new InputStreamReader(socket.getInputStream()));   			// Receive request data.
	 		String requestLocation =  request.readLine();															// The method used and the requested path.
		    String requestHeader = null;																			// String holding request header.		    
		    String boundary = null;
		    String contentLength ="";
		    // Go through request header.
		    while ((requestHeader = request.readLine()) != null){
		    	if(requestHeader.isEmpty())
		    		break;    	
		    	if(requestHeader.contains("Content-Type: multipart/form-data;"))
		    		boundary = requestHeader;	
		    	if(requestHeader.contains("Content-Length:"))
		    		contentLength = requestHeader;
		    }
		    
		    contentLength = contentLength.substring(contentLength.indexOf(" ")+1,contentLength.length());
		    
	
		    // Creating a StringTokenizer
		    if(requestLocation == null)
		    	return;
		    
		    // Make sure to only filter important requests.
		    if(  !requestLocation.contains(".css") && !requestLocation.contains(".js") && !requestLocation.contains(".jpg") && !requestLocation.contains("favicon.png") )	// Filter css, js and jpg files.
		    	System.out.println("\nNew " +requestLocation +" request by "+ socket.getInetAddress().getHostAddress() + ":" + socket.getPort());	// Log in console.
		    
	        StringTokenizer requestTokens = new StringTokenizer(requestLocation);  
	        String requestMethod = requestTokens.nextToken();

		    if(requestMethod.equals("GET"))
		    	Response.genResponse(requestTokens);											// Fix the requested path and generate a response.
		    else if(requestMethod.equals("POST")) {
		    	try {
		    		if( Long.parseLong(contentLength) >= 242880) { 						// If file is larger than
		    			Post.tooLarge();												// Discard the file.	
		    			
		    		}else 
		    			Post.handlePost(boundary, contentLength);						// Try to upload the file.
		    	}catch(Exception e){ Errors.errorHandle("500 Internal Server Error", "Error 500: Internal Server Error."); }
		    	
		    }else
		    	Errors.errorHandle("405 Method Not Allowed","Error 404 Method" +requestMethod +"Not Allowed.\n Please use GET or POST.");																// If the requested method is not allowed, then display an error.
		    
	 	} catch (Exception e) {
	 		e.printStackTrace();
	 		Errors.errorHandle("500 Internal Server Error", "Error 500: Internal Server Error."); // If something happens here, send an internal error to the user.
		}
	}

	@Override
	public void run() {
		try {
            handleHeader();	 			// Handle the client's request here.
        } catch (Exception e) {
            e.printStackTrace();
        } finally {						// Ensure that the socket is always closed, even if an exception is thrown during the request handling.
            try {      
                socket.close();			// close the socket when you are done with it.
            } catch (Exception e) {
                e.printStackTrace(); 	// If something goes wrong while closing socket.
            }
        }
	}
		
	
}