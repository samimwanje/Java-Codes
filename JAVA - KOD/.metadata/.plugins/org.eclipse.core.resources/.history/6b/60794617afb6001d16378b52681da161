package mm223kk_assignment_2;

//Needed libraries, only built in.
import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;

/**
 * This class handles all the most known errors that,
 * may occur while the server is running.
 * @author Sami Mwanje, mm223kk@student.lnu.se
 *
 */
public class Errors {
	
	private Socket socket;	// Current socket
	private File root;		// Current root
	Errors(Socket socket, File root) {
		this.socket = socket;	
		this.root = root;
	}

	 /**
	  * This function is used to indicate if something went wrong while,
	  * generating a response. If the requested page was not found code 404 will be returned.
	  */
	 public void errorHandle(String code, String message){
		 
			  byte[] errorPage = null;		
			  try {	// Try the error solution based on my own server set up.
				  errorPage = Files.readAllBytes(Paths.get(root.getPath()+"\\errors\\"+code.substring(0,3)+".html"));		// Go to error page.	
			  }catch (Exception e) { }		  

			try {
				if(errorPage == null)														// If no error page file was found in directories.
						errorPage = message.getBytes();											// Use standard message as error solution.
				
				System.out.print(1/0);
				
		 		DataOutputStream data = new DataOutputStream(socket.getOutputStream());
		 		PrintWriter head = new PrintWriter(socket.getOutputStream());
		 		head.println("HTTP/1.1 "+code);												// Response code.
		 		head.println("Server: NetworkServer Mm223kk_assignment: 2.0");				// Server Information.
		 		head.println("Date: " + new Date());										// Current Time.
		 		head.println("Content-Type: text/html");				// Set the type.
		 		head.println("Content-Length: " + errorPage.length);						// Content size (bytes).
		 		head.println();																// New line between response header, and response data.
		 		head.flush();																// Clear the stream.		 		
		 	    data.write(errorPage);														// Write the data to the header.
		 	    data.flush();																// Clear the stream.
		 	    // Close the input streams and socket.
		 	    head.close();																// Close the header stream.
		 	    data.close();																// Close the data stream.
		 	    socket.close();																// Close the socket.
			} catch (IOException e) {
				e.printStackTrace();														// Print error.
				internalError(); // If something happens here, send an internal error to the user.
			}	 
	 }
	 
 
	 public void internalError(){

		  byte[] errorPage = null;		
		  try {	// Try the error solution based on my own server set up.
			  errorPage = Files.readAllBytes(Paths.get(root.getPath()+"\\errors\\500.html"));		// Go to error page.	
		  }catch (Exception e) {}		  

		try {
			
			if(errorPage == null)														// If no error page file was found in directories.
					errorPage = "Error 500: Internal Server Error.".getBytes();											// Use standard message as error solution.
			
	 		DataOutputStream data = new DataOutputStream(socket.getOutputStream());
	 		PrintWriter head = new PrintWriter(socket.getOutputStream());
	 		head.println("HTTP/1.1 500 Internal Server Error");												// Response code.
	 		head.println("Server: NetworkServer Mm223kk_assignment: 2.0");				// Server Information.
	 		head.println("Date: " + new Date());										// Current Time.
	 		head.println("Content-Type: text/html");				// Set the type.
	 		head.println("Content-Length: " + errorPage.length);						// Content size (bytes).
	 		head.println();																// New line between response header, and response data.
	 		head.flush();																// Clear the stream.		 		
	 	    data.write(errorPage);														// Write the data to the header.
	 	    data.flush();																// Clear the stream.
	 	    // Close the input streams and socket.
	 	    head.close();																// Close the header stream.
	 	    data.close();																// Close the data stream.
	 	    socket.close();																// Close the socket.
		} catch (Exception e) {
			e.printStackTrace();														// If error occurs here, print the error. To avoid infinity loop.
		}	 
	 
	 }

}
